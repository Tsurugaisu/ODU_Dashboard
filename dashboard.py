import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go


col_names = ["date", "chaine", "b", "theme", "nombre_sujets", "duree"]
df = pd.read_csv(
    "Data/ina-barometre-jt-tv-donnees-quotidiennes-2000-2020-nbre-sujets-durees-202410.csv",
    delimiter=";",
    encoding="ISO-8859-1",
    header=None,
    names=col_names,
)
df = df.drop(["b"], axis=1)
df["date"] = pd.to_datetime(df["date"], dayfirst=True)
df["Ann√©e"] = df["date"].dt.year

df["duree_minutes"] = df["duree"] / 60
df["duree_heures"] = df["duree"] / 3600


df_st = df[df["theme"] == "Sciences et techniques"]
df_st["Ann√©e"] = df_st["date"].dt.year
df_sciences_grouped = df_st.groupby("Ann√©e")["duree"].sum() / 3600

# Affichage des graphiques


st.set_page_config(page_title="Dashboard", page_icon=":bar_chart:", layout="wide")

st.sidebar.title("üìä Navigation")
page = st.sidebar.radio(
    "Choisissez un Dashboard :",
    [
        "Pr√©sentation du Projet",
        "Analyse Th√©matique",
        "Sciences",
        "√âconomie",
        "TF1",
        "Analyse M√©dias",
        "Comparaison Th√®mes",
    ],
)


if page == "Pr√©sentation du Projet":
    st.markdown(
        "Bienvenue sur notre projet, r√©alis√© dans le cadre de l'initiative Open Data University, un programme port√© par l'association Latitudes pour encourager l'utilisation des donn√©es ouvertes au service de la soci√©t√©. \n\n"
        "Notre travail s'inscrit dans le d√©fi *Les Fran√ßaises et Fran√ßais et l audiovisuel*, avec pour objectif d‚Äôanalyser l‚Äô√©volution des th√©matiques abord√©es √† la t√©l√©vision au fil du temps. \n\n"
        "Vous pouvez en apprendre plus sur Open Data University [**ici**](https://defis.data.gouv.fr/opendatauniversity). \n\n"
        "Vous pouvez retrouver diff√©rents dashboards dans ce projet : \n\n"
        "- Analyse th√©matique : Permet d'avoir une vue d'ensemble afin d'analyser les th√®mes avec possibilit√© de filtre un th√®me sp√©cifique \n\n"
        "- Sciences : Focus sur le th√®me Sciences et techniques \n\n"
        "- √âconomie : Focus sur le th√®me √âconomie \n\n"
        "- TF1 : Focus sur la cha√Æne de t√©l√©vision TF1 \n\n"
        "- Analyse M√©dias : Focus sur des √©v√®nements majeurs et leur impact sur la diffusion de leur th√®me \n\n"
        "- Comparaison th√®mes : Permet de comparer 2 th√®mes afin de voir leur diff√©rentes √©volutions"
    )

if page == "Sciences":
    st.title("Dashboard : Analyse de l'√©volution du th√®me Sciences √† la t√©l√©vision")

    col11, col12, col13 = st.columns(3)

    with col11:
        df_sciences_avg_duration = df_st.groupby("Ann√©e")["duree"].mean().reset_index()
        df_sciences_avg_duration.columns = ["Ann√©e", "duree_moyenne_secondes"]

        fig = px.bar(
            df_sciences_avg_duration,
            x="Ann√©e",
            y="duree_moyenne_secondes",
            title="Dur√©e moyenne des reportages sur le theme 'Sciences'",
        )

        fig.update_layout(
            xaxis_title="Ann√©e",
            yaxis_title="Dur√©e moyenne (en secondes)",
            template="plotly_white",
        )

        st.plotly_chart(fig, use_container_width=True)

    with col12:
        df_st_annee = df_st[df_st["Ann√©e"].isin([2000, 2020])]
        df_st_grouped = df_st_annee.groupby(["chaine", "Ann√©e"])["duree"].sum() / 3600
        df_st_grouped = df_st_grouped.reset_index()
        df_st_grouped.columns = ["chaine", "Ann√©e", "duree_totale_heures"]

        df_st_grouped["Ann√©e"] = df_st_grouped["Ann√©e"].astype(
            str
        )  ## Passer en str pour ne plus avoir la l√©gende en d√©grad√© et les barres cote √† cote

        fig = px.bar(
            df_st_grouped,
            x="chaine",
            y="duree_totale_heures",
            color="Ann√©e",
            barmode="group",
            title="Comparaison du temps d'antenne du th√®me 'Sciences' en 2000 et 2020",
            color_discrete_map={
                "2000": "blue",
                "2020": "red",
            },
        )

        fig.update_layout(
            xaxis_title="Cha√Æne TV",
            yaxis_title="Dur√©e totale des reportages (en heures)",
            template="plotly_white",
            xaxis=dict(tickangle=45),
            legend_title="Ann√©e",  # Titre de la l√©gende
        )

        # Afficher dans Streamlit
        st.plotly_chart(fig, use_container_width=True)

    with col13:
        df_sciences_chaines = df_st.groupby("chaine")["duree"].sum().reset_index()
        df_sciences_chaines.columns = ["chaine", "duree_totale"]

        fig = px.pie(
            df_sciences_chaines,
            names="chaine",
            values="duree_totale",
            title="R√©partition du temps d'antenne du theme 'Sciences' par chaine",
            color_discrete_sequence=px.colors.qualitative.Set3,
        )

        st.plotly_chart(fig, use_container_width=True)

    st.markdown("---")

    col21, col22 = st.columns(2)

    with col21:
        # Convertir les donn√©es en DataFrame pour Plotly
        df_sciences_grouped = df_sciences_grouped.reset_index()
        df_sciences_grouped.columns = ["Ann√©e", "duree_totale_heures"]

        # Cr√©ation du graphique interactif avec Plotly Express
        fig = px.line(
            df_sciences_grouped,
            x="Ann√©e",
            y="duree_totale_heures",
            markers=True,  # Ajoute des marqueurs sur la ligne
            line_shape="linear",
            title="√âvolution de la dur√©e d'apparition du theme Sciences",
        )

        # Personnalisation du style
        fig.update_traces(line=dict(color="blue"))  # D√©finir la couleur de la ligne
        fig.update_layout(
            xaxis_title="Ann√©e",
            yaxis_title="Dur√©e totale des reportages (en heures)",
            xaxis=dict(dtick=2),  # Un tick tous les 2 ans
            template="plotly_white",  # Fond blanc plus moderne
        )

        # Afficher dans Streamlit
        st.plotly_chart(fig, use_container_width=True)

    with col22:
        df_sciences_count = (
            df_st.groupby("Ann√©e").size().reset_index(name="Nombre de reportages")
        )

        # Cr√©ation du graphique interactif avec Plotly Express
        fig = px.line(
            df_sciences_count,
            x="Ann√©e",
            y="Nombre de reportages",
            markers=True,  # Ajoute des marqueurs sur la ligne
            line_shape="linear",
            title="√âvolution du nombre de reportages sur le theme Sciences",
        )

        # Personnalisation du style
        fig.update_traces(line=dict(color="green"))  # D√©finir la couleur de la ligne
        fig.update_layout(
            xaxis_title="Ann√©e",
            yaxis_title="Nombre de reportages",
            xaxis=dict(dtick=2),  # Un tick tous les 2 ans
            template="plotly_white",  # Fond blanc plus moderne
        )

        # Afficher dans Streamlit
        st.plotly_chart(fig, use_container_width=True)

elif page == "TF1":
    st.title("Dashboard : Analyse de l'√©volution de la cha√Æne de t√©l√©vision TF1")

    df_tf1 = df[df["chaine"] == "TF1"]

    df_tf1_duree_theme = df_tf1.groupby("theme")["duree_heures"].sum().reset_index()
    df_tf1_duree_theme = df_tf1_duree_theme.sort_values(
        by="duree_heures", ascending=False
    )

    # Cr√©ation du barplot avec Plotly Express
    fig = px.bar(
        df_tf1_duree_theme,
        x="theme",
        y="duree_heures",
        title="Temps total d'apparition des th√®mes sur TF1",
        labels={"Dur√©e (en heures)": "Dur√©e totale (en heures)"},
        color_discrete_sequence=["#1f77b4"],
        text_auto=True,  # Afficher les valeurs sur les barres
    )

    # Personnalisation du layout
    fig.update_layout(
        xaxis_title="Th√®me",
        yaxis_title="Dur√©e totale (en heures)",
        xaxis=dict(tickangle=45),  # Rotation des labels pour lisibilit√©
        template="plotly_white",
    )

    # Afficher dans Streamlit
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("----")

    col21, col22 = st.columns(2)

    with col21:

        df_tf1_duree_moy = df_tf1.groupby("Ann√©e")["duree"].mean().reset_index()

        # Cr√©ation du graphique
        fig = px.line(
            df_tf1_duree_moy,
            x="Ann√©e",
            y="duree",
            markers=True,
            title="Evolution du temps d'exposition moyen d'un sujet sur TF1",
            line_shape="linear",
        )

        # Mise en forme
        fig.update_traces(line=dict(color="red"), marker=dict(size=6))
        fig.update_layout(
            xaxis_title="Ann√©e",
            yaxis_title="Dur√©e moyenne des reportages (en secondes)",
            template="plotly_white",
            xaxis=dict(tickmode="linear", dtick=2),  # Un tick tous les 2 ans
        )

        # Affichage dans Streamlit
        st.plotly_chart(fig, use_container_width=True)

    with col22:
        df_tf1_count = (
            df[df["chaine"] == "TF1"]
            .groupby("Ann√©e")
            .size()
            .reset_index(name="Nombre de reportages")
        )

        # Cr√©er le graphique avec Plotly
        fig = px.bar(
            df_tf1_count,
            x="Ann√©e",
            y="Nombre de reportages",
            text_auto=True,  # Afficher les valeurs sur les barres
            title="√âvolution du nombre de sujets abord√©s sur TF1",
            color_discrete_sequence=["#1f77b4"],  # Bleu TF1
        )

        # Mise en forme
        fig.update_layout(
            xaxis_title="Ann√©e",
            yaxis_title="Nombre de reportages",
            template="plotly_white",
            xaxis=dict(tickangle=45),  # Incliner les labels si n√©cessaire
        )

        # Afficher dans Streamlit
        st.plotly_chart(fig, use_container_width=True)

        df_tf1_theme = (
            df[df["chaine"] == "TF1"]
            .groupby(["Ann√©e", "theme"])["duree_heures"]
            .sum()
            .reset_index()
        )

    fig = px.line(
        df_tf1_theme,
        x="Ann√©e",
        y="duree_heures",
        color="theme",
        title="√âvolution du temps d'antenne des th√®mes sur TF1",
        markers=True,
    )

    fig.update_layout(
        xaxis_title="Ann√©e",
        yaxis_title="Dur√©e totale (en heures)",
        template="plotly_white",
    )
    st.plotly_chart(fig, use_container_width=True)


elif page == "Analyse Th√©matique":
    st.title("Dashboard : Analyse Th√©matique des Sujets")
    # Initialisation du th√®me s√©lectionn√© d√®s le d√©but
    if "theme_duration_selected" not in st.session_state:
        st.session_state.theme_duration_selected = df["theme"].unique()[0]

    # Premi√®re ligne : r√©partition globale + r√©partition annuelle
    col1, col2 = st.columns(2)

    with col1:

        if "theme" in df.columns:
            df_theme = df["theme"].value_counts().reset_index()
            df_theme.columns = ["theme", "count"]
            fig_bar = px.bar(
                df_theme,
                x="theme",
                y="count",
                labels={"count": "Nombre d'occurrences", "theme": "Th√®me"},
                title="Nombre total de sujets par th√®me",
            )
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.error("La colonne 'theme' est manquante dans le dataset.")

    with col2:

        if (
            "theme" in df.columns
            and "nombre_sujets" in df.columns
            and "date" in df.columns
        ):
            df["year"] = df["date"].dt.year

            if "selected_year_state" not in st.session_state:
                st.session_state.selected_year_state = int(df["year"].max())

            selected_year = st.session_state.selected_year_state
            df_year = df[df["year"] == selected_year]

            if not df_year.empty:
                df_theme_pie = (
                    df_year.groupby("theme")["nombre_sujets"].sum().reset_index()
                )

                fig_pie = px.pie(
                    df_theme_pie,
                    values="nombre_sujets",
                    names="theme",
                    title=f"R√©partition des th√®mes en {selected_year}",
                    hole=0.3,
                )
                st.plotly_chart(fig_pie, use_container_width=True)

                # Slider en dessous du graphique
                selected_year = st.slider(
                    "üìÖ Choisissez une ann√©e :",
                    min_value=int(df["year"].min()),
                    max_value=int(df["year"].max()),
                    value=selected_year,
                    key="slider_theme_year",
                )
                st.session_state.selected_year_state = selected_year
            else:
                st.warning("Aucune donn√©e disponible pour cette ann√©e.")
        else:
            st.error("Colonnes manquantes pour l‚Äôanalyse par ann√©e.")

    # Deuxi√®me ligne : Th√®me par m√©dia + √âvolution d‚Äôun th√®me
    col3, col4 = st.columns(2)

    with col3:

        if (
            "theme" in df.columns
            and "chaine" in df.columns
            and "nombre_sujets" in df.columns
        ):
            # Initialiser une valeur par d√©faut dans session_state si n√©cessaire
            if "theme_selected_col3" not in st.session_state:
                st.session_state.theme_selected_col3 = df["theme"].unique()[0]

            selected_theme_col3 = st.session_state.theme_selected_col3

            # Filtrage des donn√©es
            df_selected = df[df["theme"] == selected_theme_col3]

            if not df_selected.empty:
                df_theme_media = (
                    df_selected.groupby("chaine")["nombre_sujets"].sum().reset_index()
                )

                if not df_theme_media.empty:
                    fig_bar = px.bar(
                        df_theme_media,
                        x="chaine",
                        y="nombre_sujets",
                        title=f"Sujets sur '{selected_theme_col3}' par m√©dia (2000‚Äì2020)",
                        labels={
                            "chaine": "Cha√Æne",
                            "nombre_sujets": "Nombre de Sujets",
                        },
                        text="nombre_sujets",
                    )
                    fig_bar.update_traces(textposition="outside")
                    st.plotly_chart(fig_bar, use_container_width=True)
                else:
                    st.warning(
                        "Le th√®me existe, mais aucune donn√©e n'est associ√©e √† une cha√Æne."
                    )
            else:
                st.warning("Aucune donn√©e disponible pour ce th√®me.")

            # Selectbox EN BAS apr√®s le graphique
            selected_theme_col3 = st.selectbox(
                "üéØ Choisissez un th√®me √† analyser :",
                df["theme"].unique(),
                index=list(df["theme"].unique()).index(selected_theme_col3),
                key="theme_select_col3",
            )

            # Met √† jour la s√©lection dans session_state
            st.session_state.theme_selected_col3 = selected_theme_col3

    with col4:

        df["year"] = df["date"].dt.year

        if "theme_duration_selected" not in st.session_state:
            st.session_state.theme_duration_selected = df["theme"].unique()[0]

        selected_theme = st.session_state.theme_duration_selected

        df_theme_time = df[df["theme"] == selected_theme]
        df_theme_time = (
            df_theme_time.groupby("year")["duree_heures"].sum().reset_index()
        )
        df_theme_time["duree_smoothed"] = (
            df_theme_time["duree_heures"].rolling(window=3, min_periods=1).mean()
        )

        fig = go.Figure()

        fig.add_trace(
            go.Scatter(
                x=df_theme_time["year"],
                y=df_theme_time["duree_heures"],
                mode="lines+markers",
                marker=dict(size=6, color="red"),
                line=dict(width=3, color="#1f77b4"),
                name="Dur√©e totale",
            )
        )

        fig.update_layout(
            title=f"√âvolution de la dur√©e d'antenne pour '{selected_theme}' (2000‚Äì2020)",
            xaxis_title="Ann√©e",
            yaxis_title="Dur√©e totale (en heures)",
            template="plotly_white",
            xaxis=dict(showgrid=False),
            yaxis=dict(showgrid=True, gridcolor="lightgrey"),
            hovermode="x unified",
        )

        st.plotly_chart(fig, use_container_width=True)

        # S√©lecteur de th√®me en bas
        selected_theme = st.selectbox(
            "üéØ Choisissez un th√®me √† analyser :",
            df["theme"].unique(),
            index=list(df["theme"].unique()).index(selected_theme),
            key="theme_duration_bottom",
        )

        st.session_state.theme_duration_selected = selected_theme


elif page == "Analyse M√©dias":
    st.title("üé¨ Dashboard : Analyse par M√©dia")

    # üìÖ Dictionnaire des √©v√©nements majeurs
    evenements_majeurs = {
        "Attentats du 11 septembre": "2001-09-11",
        "Crise financi√®re de 2008": "2008-09-15",
        "√âlection pr√©sidentielle France 2017": "2017-05-07",
        "Covid-19 (d√©but OMS)": "2020-03-11",
        "Gilets Jaunes France": "2018-11-17",
        "COP21 (Accord de Paris)": "2015-12-12",
    }

    # S√©lection des filtres (affich√©s en bas mais d√©clar√©s ici)
    col_ev, col_med = st.columns([2, 1])

    with col_ev:
        selected_event = st.selectbox(
            "üóìÔ∏è S√©lectionnez un √©v√©nement :",
            list(evenements_majeurs.keys()),
            key="event_selector",
        )

    with col_med:
        selected_media = st.selectbox(
            "üì∫ S√©lectionnez un m√©dia :", df["chaine"].unique(), key="media_selector"
        )

    # Calcul des p√©riodes
    event_date = pd.to_datetime(evenements_majeurs[selected_event])
    periode_avant = event_date - pd.DateOffset(months=6)
    periode_apres = event_date + pd.DateOffset(months=6)

    # Cr√©ation des colonnes de visualisation
    col1, col2 = st.columns(2)

    with col1:
        # Filtrage m√©dia + p√©riode
        df_event = df[(df["date"] >= periode_avant) & (df["date"] <= periode_apres)]
        df_event = df_event[df_event["chaine"] == selected_media]

        # Avant / apr√®s
        df_event["periode"] = df_event["date"].apply(
            lambda x: "Avant" if x < event_date else "Apr√®s"
        )
        df_event_time = (
            df_event.groupby(["periode", "theme"])["duree_heures"].sum().reset_index()
        )

        # Graphique
        fig_event = px.bar(
            df_event_time,
            x="periode",
            y="duree_heures",
            color="theme",
            title=f"Couverture de '{selected_event}' sur {selected_media}",
            labels={
                "periode": "P√©riode",
                "duree": "Dur√©e totale (s)",
                "theme": "Th√®me",
            },
            text_auto=".2s",
            barmode="stack",
        )

        fig_event.update_layout(
            template="plotly_white",
            xaxis_title="P√©riode",
            yaxis_title="Dur√©e totale (en heures)",
            yaxis=dict(gridcolor="lightgrey"),
            legend_title="Th√®me",
        )

        st.plotly_chart(fig_event, use_container_width=True)

    with col2:

        #  Associer chaque √©v√©nement √† une th√©matique cl√©
        theme_evenement = {
            "Attentats du 11 septembre": "International",
            "Crise financi√®re de 2008": "√âconomie",
            "√âlection pr√©sidentielle France 2017": "Politique France",
            "Covid-19 (d√©but OMS)": "Sant√©",
            "Gilets Jaunes France": "Soci√©t√©",
            "COP21 (Accord de Paris)": "Environnement",
        }

        # R√©cup√©rer le th√®me associ√© √† l'√©v√©nement s√©lectionn√©
        if selected_event in theme_evenement:
            theme_associe = theme_evenement[selected_event]

        # Filtrer sur la p√©riode + th√©matique associ√©e
        df_event_theme = df[
            (df["date"] >= periode_avant)
            & (df["date"] <= periode_apres)
            & (df["theme"] == theme_associe)
        ]

        df_theme_par_chaine = (
            df_event_theme.groupby("chaine")["duree_heures"].sum().reset_index()
        )
        df_theme_par_chaine = df_theme_par_chaine.sort_values(
            by="duree_heures", ascending=False
        )

        # Graphe
        fig_theme_chaine = px.bar(
            df_theme_par_chaine,
            x="chaine",
            y="duree_heures",
            title=f"Dur√©e d‚Äôexposition au th√®me '{theme_associe}' autour de l‚Äô√©v√©nement '{selected_event}'",
            labels={"chaine": "Cha√Æne", "duree": "Dur√©e totale (en heures)"},
            color="chaine",
            color_discrete_sequence=px.colors.qualitative.Set2,
        )

        fig_theme_chaine.update_layout(
            template="plotly_white",
            yaxis_title="Dur√©e totale (en heures)",
            xaxis_title="Cha√Æne TV",
            yaxis=dict(gridcolor="lightgrey"),
            showlegend=False,
        )

        st.plotly_chart(fig_theme_chaine, use_container_width=True)

        col3, col4 = st.columns(2)

        with col3:

            # R√©cup√©rer les donn√©es dans la m√™me p√©riode que les autres graphiques
            df_event_global = df[
                (df["date"] >= periode_avant) & (df["date"] <= periode_apres)
            ]

            # Agr√©ger la dur√©e par th√®me
            df_theme_duree = (
                df_event_global.groupby("theme")["duree_heures"].sum().reset_index()
            )
            df_theme_duree = df_theme_duree.sort_values(
                by="duree_heures", ascending=False
            )

            # Graphique √† barres (top 10)
            fig_theme_bar = px.bar(
                df_theme_duree.head(10),
                x="theme",
                y="duree_heures",
                title=f"Th√®mes dominants autour de '{selected_event}' (toutes cha√Ænes)",
                labels={"theme": "Th√®me", "duree_heures": "Dur√©e totale (en heures)"},
                color="theme",
                color_discrete_sequence=px.colors.qualitative.Set3,
            )

            fig_theme_bar.update_layout(
                template="plotly_white",
                xaxis_title="Th√®me",
                yaxis_title="Dur√©e totale d‚Äôantenne (en heures)",
                yaxis=dict(gridcolor="lightgrey"),
                xaxis=dict(tickangle=30),
                showlegend=False,
            )

            st.plotly_chart(fig_theme_bar, use_container_width=True)


elif page == "√âconomie":
    st.title("üíº Dashboard : Couverture du th√®me √âconomie")

    #  Pr√©paration des donn√©es
    df_economie = df[df["theme"] == "Economie"].copy()
    df_economie["Ann√©e"] = df_economie["date"].dt.year
    df_economie["Mois"] = df_economie["date"].dt.to_period("M").astype(str)

    # --------- Graph 1 : Scatter sujets vs dur√©e ---------
    df_scatter = (
        df_economie.groupby("chaine")
        .agg(total_duree=("duree_heures", "sum"), nb_sujets=("nombre_sujets", "sum"))
        .reset_index()
    )

    fig1 = px.scatter(
        df_scatter,
        x="nb_sujets",
        y="total_duree",
        text="chaine",
        size="total_duree",
        color="chaine",
        labels={
            "nb_sujets": "Nombre de sujets",
            "total_duree": "Dur√©e totale (en heures)",
            "chaine": "Cha√Æne",
        },
        title="Nombre de sujets vs Dur√©e totale par cha√Æne (√âconomie)",
    )
    fig1.update_traces(textposition="top center")
    fig1.update_layout(template="plotly_white", hovermode="closest")

    # --------- Graph 2 : Dur√©e moyenne par sujet ---------
    df2 = df_economie.groupby("Ann√©e")["duree"].mean().reset_index()
    fig2 = px.bar(
        df2,
        x="Ann√©e",
        y="duree",
        title="Dur√©e moyenne par sujet √©conomique",
        labels={"duree": "Dur√©e moyenne (s)", "Ann√©e": "Ann√©e"},
    )

    # --------- Graph 3 : R√©partition des cha√Ænes ---------
    df3 = df_economie.groupby("chaine")["duree"].sum().reset_index()
    fig3 = px.pie(
        df3,
        names="chaine",
        values="duree",
        title="R√©partition des sujets √©conomiques par cha√Æne",
    )

    # --------- Affichage ligne 1 ---------
    col1, col2, col3 = st.columns(3)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)
    with col3:
        st.plotly_chart(fig3, use_container_width=True)

    st.markdown("---")

    # --------- Graph 4 : Classement des cha√Ænes ---------
    df4 = (
        df_economie.groupby("chaine")["duree_heures"]
        .sum()
        .reset_index()
        .sort_values(by="duree_heures", ascending=True)
    )
    fig4 = px.bar(
        df4,
        x="duree_heures",
        y="chaine",
        orientation="h",
        title="Dur√©e totale d'antenne par cha√Æne (√âconomie)",
        labels={"duree_heures": "Dur√©e totale (en heures)", "chaine": "Cha√Æne"},
        color="duree_heures",
        color_continuous_scale="Viridis",
    )

    # --------- Graph 5 : √âvolution des top cha√Ænes ---------
    df5 = df_economie.groupby(["Ann√©e", "chaine"])["duree_heures"].sum().reset_index()
    top_chaines = df4["chaine"].tail(5).tolist()
    df_top = df5[df5["chaine"].isin(top_chaines)]

    fig5 = px.line(
        df_top,
        x="Ann√©e",
        y="duree_heures",
        color="chaine",
        markers=True,
        title="√âvolution annuelle des cha√Ænes les plus actives (√âconomie)",
        labels={
            "duree_heures": "Dur√©e totale (en heures)",
            "Ann√©e": "Ann√©e",
            "chaine": "Cha√Æne",
        },
    )
    fig5.update_layout(template="plotly_white", hovermode="x unified")

    # --------- Affichage ligne 2 ---------
    col4, col5 = st.columns(2)
    with col4:
        st.plotly_chart(fig4, use_container_width=True)
    with col5:
        st.plotly_chart(fig5, use_container_width=True)


elif page == "Comparaison Th√®mes":
    st.title("üîç Dashboard : Comparaison entre deux th√®mes t√©l√©vis√©s")

    # üéõÔ∏è S√©lection des deux th√®mes
    all_themes = df["theme"].dropna().unique()
    col_select1, col_select2 = st.columns(2)

    with col_select1:
        theme1 = st.selectbox(
            "üìå Choisissez le premier th√®me", sorted(all_themes), key="theme1"
        )
    with col_select2:
        theme2 = st.selectbox(
            "üìå Choisissez le second th√®me", sorted(all_themes), index=1, key="theme2"
        )

    # Filtrage
    df1 = df[df["theme"] == theme1].copy()
    df2 = df[df["theme"] == theme2].copy()

    df1["Ann√©e"] = df1["date"].dt.year
    df2["Ann√©e"] = df2["date"].dt.year

    # ---------- GRAPHIQUE 1 : √âvolution dur√©e ----------
    df_duree = (
        pd.concat([df1, df2])
        .groupby(["Ann√©e", "theme"])["duree_heures"]
        .sum()
        .reset_index()
    )

    fig_duree = px.line(
        df_duree,
        x="Ann√©e",
        y="duree_heures",
        color="theme",
        markers=True,
        title="√âvolution de la dur√©e d‚Äôantenne",
        labels={
            "duree_heures": "Dur√©e totale (en heures)",
            "Ann√©e": "Ann√©e",
            "theme": "Th√®me",
        },
    )
    fig_duree.update_layout(template="plotly_white", hovermode="x unified")

    # ---------- GRAPHIQUE 2 : Nombre de sujets ----------
    df_count = (
        pd.concat([df1, df2])
        .groupby(["Ann√©e", "theme"])
        .size()
        .reset_index(name="nombre_sujets")
    )

    fig_count = px.bar(
        df_count,
        x="Ann√©e",
        y="nombre_sujets",
        color="theme",
        barmode="group",
        title="Nombre de sujets par ann√©e",
        labels={
            "nombre_sujets": "Nombre de sujets",
            "Ann√©e": "Ann√©e",
            "theme": "Th√®me",
        },
    )
    fig_count.update_layout(template="plotly_white")

    # --------- Affichage c√¥te √† c√¥te ---------
    col_g1, col_g2 = st.columns(2)
    with col_g1:
        st.plotly_chart(fig_duree, use_container_width=True)
    with col_g2:
        st.plotly_chart(fig_count, use_container_width=True)

    st.markdown("---")

    # ---------- GRAPHIQUE 3 : Classement des cha√Ænes ----------
    st.subheader("üì∫ Classement des cha√Ænes par dur√©e pour chaque th√®me")

    col3, col4 = st.columns(2)

    with col3:
        top_chaine1 = (
            df1.groupby("chaine")["duree_heures"]
            .sum()
            .reset_index()
            .sort_values(by="duree_heures", ascending=False)
        )
        fig_chaine1 = px.bar(
            top_chaine1.head(5),
            x="chaine",
            y="duree_heures",
            title=f"üèÜ Top cha√Ænes - {theme1}",
            labels={"chaine": "Cha√Æne", "duree_heures": "Dur√©e totale (en heures)"},
            color="chaine",
        )
        st.plotly_chart(fig_chaine1, use_container_width=True)

    with col4:
        top_chaine2 = (
            df2.groupby("chaine")["duree_heures"]
            .sum()
            .reset_index()
            .sort_values(by="duree_heures", ascending=False)
        )
        fig_chaine2 = px.bar(
            top_chaine2.head(5),
            x="chaine",
            y="duree_heures",
            title=f"üèÜ Top cha√Ænes - {theme2}",
            labels={"chaine": "Cha√Æne", "duree_heures": "Dur√©e totale (en heures)"},
            color="chaine",
        )
        st.plotly_chart(fig_chaine2, use_container_width=True)
